@startuml 

noncopyable <|-- TcpServer 
TcpServer *-- Acceptor 
TcpServer *-- TcpConnection

class TcpServer
{
    __public function__
    + TcpServer(EventLoop *loop, const InetAddress &listenAddr, const string &name = string())
    + ~TcpServer()
    + string serverName()
    + int ipPort()
    + void start()
    + void setMessageCallback(const MessageCallback &cb)
    + void setConnectionCallback(const ConnectionCallback &cb)

    __private function__
    - void newConnection(int sockfd, const InetAddress &peerAddr)
    - void removeConnnectoin(const TcpConnectionPtr &conn)
    - void removeConectionInLoop(const TcpConnectionPtr &conn)

    __private data__
    - set<TcpConnectionPtr> connections_ 
    - MessageCallback messageCallback_
    - ConnectionCallback connectionCallback_
    - const string name_
    - int ipPort_
    - EventLoop *loop_
    - unique_ptr<Acceptor> acceptor_
}

note as N1

TcpServer的职能?(暂时只实现单线程)
TcpSever应用有哪些public function呢?
.TcpServer(EventLoop *loop, const InetAddress &listenAddr, const string &name)
.~TcpServer()
.string serverName()
.int ipPort()
.void start()
.void setMessageCallback(const MessageCallback &cb)             TcpConnection::messageCallback_ 就是TcpServer::messageCallback_
.void setConnectionCallback(const ConnectionCallback &cb)       TcpConnection::connectionCallback_ 就是TcpServer::connectionCallback_

TcpSever应该有哪些private function呢？
.void newConnectoin(int fd, const InetAddress &peerAddr)        Acceptor::newConnectionCallback_ 就是TcpServer::newConnection
.void removeConnection(const TcpConnectoinPtr &conn)            TcpConnection::closeCallback_就是TcpServer::removeConnection
.void removeConectionInLoop(const TcpConnectionPtr &conn)

TcpServer应该有哪些private data呢？
1.set<TcpConnectoinPtr> connections_        保存所有的TcpConnection, TcpConnectoinPtr第一个shared_ptr
2.MessageCallback messageCallback_          网络库只负责读取客户端的数据，但是如何处理是通过设置messageCallback_来实现的
3.ConnectionCallback connectionCallback_    这个回到函数在连接建立的时候创建 
4.const string name_                        服务器名
5.int ipPort_                               服务器端口号
6.unique_ptr<Acceptor> acceptor_            对listenfd的封装

end note 

@enduml 